#!/usr/bin/env ruby

require 'thor'
require 'query_log_tools.rb'

include QueryLogTools

class App < Thor
  package_name "Query Log Tools"

  desc "analyze [logfile]", "Analyze log file and print a summary"
  option :top, :type => :numeric, :default => 5, :aliases => "-t",
         :desc => "Length of top-lists"
  def analyze(filename = nil)
    query_log_summary(filename, options)
  end

  desc "queries [logfile]", "List queries"
  option :cached, :type => :boolean, :default => false, :aliases => "-c",
         :desc => "Include cached queries (default false)"
  def queries(filename = nil)
    query_log_queries(filename, options)
  end

  desc "classes [logfile]", "List classes"
  option :counts, :type => :boolean, :default => true,
         :desc => "List counts"
  def classes(filename = nil)
    query_log_classes(filename, options)
  end

  # FIXME: CTRL-C is noisy
  desc "capture [logfile]", "Capture queries from application"
  def capture(logfile = nil)
    query_log_capture(logfile)
  end

  # TODO: Add options for database connection parameters
  desc "replay logfile", "Replay log against database"
  option :config, :type => :string, :default => nil, :aliases => "-c",
         :desc => "Path to YAML database configuration file or rails root directory. Default is to scan for database.yml"
  option :environment, :type => :string, :default => "development", :aliases => "-e",
         :desc => "Environment from the database configuration"
  option :host, :type => :string, :aliases => "-h",
         :desc => "Database hostname or IP address"
  option :username, :type => :string, :aliases => "-u",
         :desc => "Database username"
  option :password, :type => :string, :aliases => "-p",
         :desc => "Database password"
  option :database, :type => :string, :aliases => "-d",
         :desc => "Database name"
  option :"warm-up", :type => :numeric, :default => 0, :aliases => "-w",
         :desc => "Number of warm-up runs before time is logged"
  def replay(filename)
    query_log_replay(filename, options)
  end

private
  def self.exit_on_failure?() true end
end

App.start

