#!/usr/bin/env ruby

require 'thor'
require 'query_log_tools.rb'
require 'log_tools/query_log_summary'

class App < Thor
  package_name "Query Log"

  desc "report [logfile]", "Analyze log file and print report"
  option :top, :desc => "Length of top-lists",
      :type => :numeric, :default => QueryLogTools::LogSummary::TOP_LIST_LENGTH, 
      :aliases => "-t"
  option :format, :desc => "Format for slow queries",
      :type => :string, :default => "raw", :aliases => "-f",
      :enum => %w(raw short abstract)
  def report(filename = "/dev/stdin")
    QueryLogTools.report(
        filename, 
        :top_n => options[:top], :format => options[:format].to_sym)
  end

  desc "list [logfile]", "List logfile entries"
  option :cached, :desc => "Include cached queries (default false)",
      :type => :boolean, :default => false, :aliases => "-c"
  def list(filename = "/dev/stdin")
    QueryLogTools.list(filename, options[:cached])
  end

  desc "queries [logfile]", "List queries"
  option :cached, :desc => "Include cached queries (default false)",
      :type => :boolean, :default => false, :aliases => "-c"
  def queries(filename = "/dev/stdin")
    QueryLogTools.list_queries(filename, options)
  end

  desc "classes [logfile]", "List classes"
  option :counts, :desc => "List counts",
      :type => :boolean, :default => true
  def classes(filename = "/dev/stdin")
    QueryLogTools.list_classes(filename, options)
  end

  # FIXME: CTRL-C is noisy
  desc "capture [logfile]", "Capture queries from application"
  def capture(logfile = "log/small_query.log")
    QueryLogTools.capture(logfile)
  end

  # TODO: Add options for database connection parameters
  desc "replay [logfile]", "Replay log against database"
  option :config, :desc => "Path to YAML database configuration file or rails root directory. Default is to scan for database.yml",
      :type => :string, :default => nil, :aliases => "-c"
  option :environment, :desc => "Environment from the database configuration",
      :type => :string, :default => "development", :aliases => "-e"
  option :host, :desc => "Database hostname or IP address",
      :type => :string, :aliases => "-h"
  option :username, :desc => "Database username",
      :type => :string, :aliases => "-u"
  option :password, :desc => "Database password",
      :type => :string, :aliases => "-p"
  option :database, :desc => "Database name",
      :type => :string, :aliases => "-d"
  option :"warm-up", :desc => "Number of warm-up runs before time is logged",
      :type => :numeric, :default => 0, :aliases => "-w"
  def replay(filename = "/dev/stdin")
    QueryLogTools.replay(filename, options)
  end

private
  def self.exit_on_failure?() true end
end

App.start

